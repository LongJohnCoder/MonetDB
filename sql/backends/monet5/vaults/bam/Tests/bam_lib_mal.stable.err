stderr of test 'bam_lib_mal` in directory 'sql/backends/monet5/vaults/bam` itself:


# 16:51:57 >  
# 16:51:57 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=39916" "--set" "mapi_usock=/var/tmp/mtest-16560/.s.monetdb.39916" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/robin/MonetDB/PREFIX/var/MonetDB/mTests_sql_backends_monet5_bam" "bam_lib_mal.mal"
# 16:51:57 >  

# builtin opt 	gdk_dbpath = /home/robin/MonetDB/PREFIX/var/monetdb5/dbfarm/demo
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_vmtrim = no
# builtin opt 	monet_prompt = >
# builtin opt 	monet_daemon = no
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	mapi_open = true
# cmdline opt 	mapi_port = 39916
# cmdline opt 	mapi_usock = /var/tmp/mtest-16560/.s.monetdb.39916
# cmdline opt 	monet_prompt = 
# cmdline opt 	gdk_dbpath = /export/scratch1/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_backends_monet5_vaults_bam
# cmdline opt 	monet_daemon = yes
# cmdline opt 	embedded_c = true
#client2:!ERROR:MALException:mal.manifold:Columns must be of same length

# 23:00:09 >  
# 23:00:09 >  "mclient" "-lmal" "-ftest" "-tnone" "-Eutf-8" "--host=/var/tmp/mtest-22038" "--port=35441"
# 23:00:09 >  

MAPI  = (monetdb) /var/tmp/mtest-22038/.s.monetdb.35441
QUERY = sht1 := calc.sht(200);
        sht2 := calc.sht(0);
        sht3 := calc.sht(100);
        f := bam.bam_flag(sht1, "segm_unma");
        io.print(f);
        fs := bat.new( :sht);
        bat.append(fs, sht1);
        bat.append(fs, sht2);
        bat.append(fs, sht3);
        fsb := batbam.bam_flag(fs, "segm_unma");
        io.print(fsb);
        
        seq_rev := bam.reverse_seq("ACGTCGTA");
        io.print(seq_rev);
        seqs := bat.new( :str);
        bat.append(seqs, seq_rev);
        bat.append(seqs, "TVGHCDMKNYSABWR");
        bat.append(seqs, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        io.print(seqs);
        seqs_rev := batbam.reverse_seq(seqs);
        io.print(seqs_rev);
        seqs_revrev := batbam.reverse_seq(seqs_rev);
        io.print(seqs_revrev);
        
        qual_rev := bam.reverse_qual("dJwn!@dJ!#jjjnsl");
        io.print(qual_rev);
        quals := bat.new( :str);
        bat.append(quals, qual_rev);
        bat.append(quals, "dJwn!@dJ!#jjjnsl");
        bat.append(quals, "I_am_a_quality_string_without_a_purpose");
        io.print(quals);
        quals_rev := batbam.reverse_qual(quals);
        io.print(quals_rev);
        quals_revrev := batbam.reverse_qual(quals_rev);
        io.print(quals_revrev);
        
        l := bam.seq_length("100M3I200D5M");
        io.print(l);
        cigars := bat.new( :str);
        bat.append(cigars, "100M3I200D5M");
        bat.append(cigars, "*");
        ls := batbam.seq_length(cigars);
        io.print(ls);
        
        
        seq_char := bam.seq_char(12, "ACTAGAATGGCT", 5, "3M1I3M1D5M");
        io.print(seq_char);
        sc_seqs := bat.new( :str);
        sc_poss := bat.new( :int);
        sc_cgrs := bat.new( :str);
        bat.append(sc_seqs, "ATACTTATAGAACAAATGAACCCAAAACCACATAAGGTAAACAACAAAGCTACTGGTTCAAAATTAAGCCTAACTTCAACAGTACCAGGCAAAAACCAT");
        bat.append(sc_seqs, "TATACTTATAGAACAAATGAACCCAAAACCACATAAGGTAAACAACAAAGCTACTGGTTCAAAATTAAGCCTAACTTCAACAGTACCAGGCAAAAACCAT");
        bat.append(sc_seqs, "GTACAAAAGTGGGAAATTTTAAAGCTGGGCATCCAGGGGAGACATCACGTGTCAGTAGGTTCCGTGATGCCCCCCAAGCCGCAAAACCAGCAAGTTTTTA");
        bat.append(sc_poss, 17922987);
        bat.append(sc_poss, 18225784);
        bat.append(sc_poss, 18226024);
        bat.append(sc_cgrs, "3=1X1=1X43=1X16=1X33=");
        bat.append(sc_cgrs, "5=1X31=1X62=");
        bat.append(sc_cgrs, "100=");
        io.print(sc_seqs);
        io.print(sc_poss);
        io.print(sc_cgrs);
        i := 17922987;
        res1:bat[:str] := mal.manifold("bam", "seq_char", i, sc_seqs, sc_poss, sc_cgrs);
        io.print(res1);
        is := sc_poss;
        res2:bat[:str] := mal.manifold("bam", "seq_char", is, sc_seqs, sc_poss, sc_cgrs);
        io.print(res2);
        is := bat.new( :int);
        bat.append(is, 17922987);
        res3:bat[:str] := mal.manifold("bam", "seq_char", is, sc_seqs, sc_poss, sc_cgrs);
        io.print(res3);	
ERROR = !MALException:mal.manifold:Columns must be of same length

# 23:00:09 >  
# 23:00:09 >  "Done."
# 23:00:09 >  


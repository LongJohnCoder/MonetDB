####technical depth####
Factor out boilerplate code mosaic code: resulting mosaic boilerplate is for testing purposes.
make sure that dense candidate lists are not transparently skipped and pushed to algebra module operators.
Introduce mosaic into gdk: create hooks in pointselect and scanselect functions/macro's.
make sure candidate lists are working properly (2)
Be sure alignment is correct. Use asserts for this.
Add test for float/double
Add test for huge
Check MOSanalysis and its test.
Fix/check/test MOSlayout.
make mitosis work with mosaic and see how this relates to the previous landmark stuff.
Remove floating point support in prefix compression and use prefix-like-frame semantics
Apply compressed operations more directly: on keys in dictionary compression (1)
Apply compressed operations more directly: on prefix|suffix in prefix compression (1)
Apply compressed operations more directly: on linear in prefix compression (1)
consider packing mosaic_block_header's more efficiently.
Add asserts on type degeneration for bit => bte daytime => lng timestmap => lng date => int.
benchmark
DO nil checking more efficient similar to gdk_select

####code issues####
Replace the MOSskip functions by MOSadvance functions
Make block headers specific by having type parametrized blockheader struct's.
atomic base type of an oid bat is lng. So we can remove that one.
It is a bit cleaner if MOSadvance call's are done outside of select functions.
Refactor frame compressions code to be more inline with the other compression algortihm code.(1)
create a common header/source file for mosaic for common tasks e.g. to house a generic IS_NIL macro, IPtpe, etc.
mosaic_<compression>.c: for type macro's use macro-wised inline functions. (1)
Factor out more boilerplate code in various compression techniques. All compression follow similar patterns. (1*)
Improve the administration of the various hard coded compression techniques, e.g. MOSskipit skip (2*)
Update copyright in 2020.
